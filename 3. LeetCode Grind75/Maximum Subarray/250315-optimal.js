/*
[문제]
- 특정 구간 합의 최댓값을 반환

[해결 방법]
- Max 값은 counter로 사용 가능
- bruteforce로 해결한다면
    - 모든 가능한 구간을 설정
        - 2중 포문으로 가능 (시작 지점, 종료 지점)
- 속도를 개선한다면
    - 가설: 한 번의 순회로 가능할 것 같음
        - (막힘)
        - 직접 해보기
            - [-2,1,-3,4,-1,2,1,-5,4]
                - 현재까지의 합이 0이거나 음수이면 가져갈 이유가 없지 않을까?
                    - (ex) [-2,1,-3] = -4 이므로, 4가 나왔을 때 기존 걸 버리는 게 이득
                    --> 현재까지의 합이 0이거나 음수면, 현재의 숫자가 양수이면 가져가고 아니면 다 버린다.
                        - 가져갈 수 있는 숫자가 끝 숫자밖에 없기 떄문임
                    --> [-2, 1] = [1]만 살림
                    --> [-2,1,-3,4] 이면 [4]만 살림
                    - 예외: 값이 하나만 있을 땐 '버릴' 수 없음.
                        - 괜찮음. 합계로 max는 보관함.
                - 현재까지의 합이 양수이면 가져가는 게 이득일 수도, 아닐 수도 있음? XXXX
                    - (ex) [1,-3,4] = 2 이므로 무조건 가져감
                    - [-2,1,-3,4,-1,2,1,-5,4] = [1,--], [4,--], [4,-1,2,1,-5,4] = 다 가져감. = 합 6
        - 예외 생각해보기
            - 없을 것 같긴 함
            - 무조건 단방향이어서.
13:35 끝
*/
var maxSubArray = function (nums) {
    let maxSum = -Infinity;
    let currSum = 0;

    for (const num of nums) {
        currSum += num;
        maxSum = Math.max(maxSum, currSum);
        currSum = Math.max(currSum, num, 0);
    }

    return maxSum;
};
